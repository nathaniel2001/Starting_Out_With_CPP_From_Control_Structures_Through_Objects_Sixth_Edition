Q 1.1:  Why is the computer used by so many people, in so many different professions?
	 A: Because they work.
Q 1.2:  List the five major hardware components of a computer system.
	 A: 
		1. CPU
		2. RAM (main memory)
		3. Storage (secondary memory)
		4. Input devices
		5. Output devices

Q 1.3:  Internally, the CPU consists of what two units?
	 A: 
		1. Control Unit
		2. Arithmetic and Logic Unit

Q 1.4:  Describe the steps in the fetch/decode/execute cycle.
	 A: 
		Fetch:   Control Unit fetches instructions from RAM
		Decode:  Decode instructions, generate signal
		Execute: Signal is routed to component, causes component
			 to perform an operation

Q 1.5:  What is a memory address? What is its purpose?
	 A: An exact assigned location in RAM used to track where information
	    is stored.

Q 1.6:  Explain why computers have both main memory and secondary storage
	 A: RAM holds the sequences of instructions in the programs that are 
	    running and the data those programs are using, secondary storage
	    holds data for long periods of time and recorded for when the machine
	    is off.

Q 1.7:  What are the two general categories of software?
	 A: 
		 1. Operating systems
		 2. Application software

Q 1.8:  What is the difference between a single tasking system and a multitasking system?
	 A: Single tasking systems are only capable of running one program at a time
	    while multitasking systems are able to run multiple programs at once.

Q 1.9:  What is the difference between a single user system and a multiuser system?
	 A: Single user systems only allow one user to operate the machine at a time 
	    while multiuser systems allow several at once.

Q 1.10: What is an algorithm? 
	 A: Set of instructions for a task to be completed.

Q 1.11: Why were computer programming languages invesnted?
	 A: Human readability 

Q 1.12: What is the difference between a high-level language and a low-level language
	 A: High-level languages are easier for people to read while low-level languages
	    use machine language 

Q 1.13: What does portability mean?
	 A: The ability to be compiled and ran with little to no change on any machine

Q 1.14: Explain the operations carried out by the preprocessor, compiler, and linker
	 A: Preprocessor reads the source code, compiler translates source code into
	    machine language and reveals syntax errors, linker combines object file
	    with runtimes and creates an executable. 

Q 1.15: Explain what is stored in a source file, an object file, and an executable file
	 A: Source files have source code, object files have object code, executable 
	    files have language instructions or executable code

Q 1.16: What is an integrated development environment?
	 A: Program with a text editor, compiler, and debugger along with other utilities.

Q 1.17: Describe the difference between a key word and a programmer-defined identifier.
	 A: Key-words can't be used for anything else other than their intended purpose
	    while programmer-defined identifiers are not part of the C++ language but
	    are names made up by the programmer.

Q 1.18: Describe the difference between operators and punctiation symbols.
	 A: Operators are for mathimatical equations and punctuation is for ending a statement.

Q 1.19: Describe the difference between a program line and a statement
	 A: A line is just a single line while statements are complete instructions.

Q 1.20: Why are variables called "variable"?
	 A: Information stored in variables may change while the program is running

Q 1.21: What happens to a variable's current contents when a new value is stored there?
	 A: It gets replaced

Q 1.22: What must take place in a program before a variable is used?
	 A: Must be stored in ram

Q 1.23: What are the three primary activities of a program?
	 A: Gathering input, performing processes on information gathered, and producing output

Q 1.24: What four items should you identify when defining what a program is to do?
	 A: Purpose, input, process, output

Q 1.25: What does it mean to "visualize a program running"? What is the value of such an activity
	 A: Creating an idea as to how it'll run. 

Q 1.26: What is a hierarchy chart
	 A: Chart that begins with overall task then refines into smaller subtasks.

Q 1.27: Describe the process of desk-checking.
	 A: Manually checking the source code a program for errors

Q 1.28: Describe what a compiler does with a program's source code
	 A: Compiler translate source code into machine language and reveals syntax errors

Q 1.29: What is a run-time error?
	 A: Error that happens while program is ran

Q 1.30: Is a syntax error (such as misspelling a key word) found by the compiler or when the program is running?
	 A: Found by the compiler

Q 1.31: What is the purpose of testing a program with sample data or input
	 A: Checking for run-time errors

Q 1.32: Briefly describe the difference between procedural and object-oriented programming
	 A: Procedural programming consists of computational steps to be carried out.
	    Object-oriented programming is based upon the concept of objects. 
